/*
 * image_processing_evm6678l_slave.cfg
 *
 * Memory Map and Program initializations for the Image Processing Application
 *
 * Copyright (C) 2011 Texas Instruments Incorporated - http://www.ti.com/ 
 *  
 *  Redistribution and use in source and binary forms, with or without 
 *  modification, are permitted provided that the following conditions 
 *  are met:
 *
 *    Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer.
 *
 *    Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the   
 *    distribution.
 *
 *    Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
 *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
 *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
*/

/*
 *   @file  image_processing_evm6678l_slave.cfg
 *
 *   @brief   
 *      Memory Map and Program initializations for the Image Processing Application.
 *
 */
 
/*******************************************************************************************
*  Specify all needed RTSC Moudles and configure them.                                     *
********************************************************************************************/

var Memory    = xdc.useModule('xdc.runtime.Memory');
var Log       = xdc.useModule('xdc.runtime.Log');
var Error     = xdc.useModule('xdc.runtime.Error');
var Diags     = xdc.useModule('xdc.runtime.Diags');
var Timestamp = xdc.useModule('xdc.runtime.Timestamp');
var Startup   = xdc.useModule('xdc.runtime.Startup');
var System    = xdc.useModule('xdc.runtime.System');
var SysStd    = xdc.useModule('xdc.runtime.SysStd');

System.SupportProxy = SysStd;

/* Load and configure SYSBIOS packages */
var BIOS      = xdc.useModule('ti.sysbios.BIOS');
var Task      = xdc.useModule('ti.sysbios.knl.Task');
var Clock     = xdc.useModule('ti.sysbios.knl.Clock');
var Sem       = xdc.useModule('ti.sysbios.knl.Semaphore');
var Hwi       = xdc.useModule('ti.sysbios.hal.Hwi');
var BiosCache = xdc.useModule('ti.sysbios.hal.Cache');
var HeapBuf   = xdc.useModule('ti.sysbios.heaps.HeapBuf');
var HeapMem   = xdc.useModule('ti.sysbios.heaps.HeapMem');
var Exc       = xdc.useModule('ti.sysbios.family.c64p.Exception');
var Cache     = xdc.useModule('ti.sysbios.family.c66.Cache');

BIOS.taskEnabled = true;
Task.common$.namedInstance = true;

/* Create a Heap. */
var heapMemParams = new HeapMem.Params;
heapMemParams.size = 0x8000;
var heap0 = HeapMem.create(heapMemParams);
Memory.defaultHeapInstance = heap0;

/* Load and configure the IPC packages */
var MessageQ     = xdc.useModule('ti.sdo.ipc.MessageQ');
var Ipc          = xdc.useModule('ti.sdo.ipc.Ipc');
var HeapBufMP    = xdc.useModule('ti.sdo.ipc.heaps.HeapBufMP');
var SharedRegion = xdc.useModule('ti.sdo.ipc.SharedRegion');
var MultiProc    = xdc.useModule('ti.sdo.utils.MultiProc');

MultiProc.setConfig(null, ["CORE0", "CORE1", "CORE2", "CORE3", "CORE4", "CORE5", "CORE6", "CORE7"]);

/* Synchronize all processors (this will be done in Ipc_start) */
Ipc.procSync = Ipc.ProcSync_ALL;

/* Shared Memory base address and length */
var SHAREDMEM           = 0x0c200000;
var SHAREDMEMSIZE       = 0x00200000;

SharedRegion.setEntryMeta(0,
    { base: SHAREDMEM, 
      len:  SHAREDMEMSIZE,
      ownerProcId: 0,
      isValid: true,
      name: "MSMCSRAM_IPC",
    });
Memory.defaultHeapSize = 0x10000;
Program.heap = 0x10000;
/* ================ Logger configuration ================ */
//var LoggerCircBuf = xdc.useModule('ti.uia.runtime.LoggerCircBuf');
//var Diags         = xdc.useModule('xdc.runtime.Diags');
var Defaults      = xdc.useModule('xdc.runtime.Defaults');
var Main          = xdc.useModule('xdc.runtime.Main');
var Load          = xdc.useModule('ti.sysbios.utils.Load');

Load.windowInMs = 50;
//CpuTimestamp     = xdc.useModule('ti.uia.family.c66.TimestampC66XLocal');
//GlobalTimestamp = xdc.useModule('ti.uia.family.c66.TimestampC66XGlobal');
//LogSync       = xdc.useModule('ti.uia.runtime.LogSync');
//LogSync.GlobalTimestampProxy = GlobalTimestamp;
//LogSync.CpuTimestampProxy = CpuTimestamp;

//CpuTimestamp.maxTimerClockFreq = {lo:1000000000,hi:0};
//CpuTimestamp.maxBusClockFreq = {lo:1000000000,hi:0};
//GlobalTimestamp.maxTimerClockFreq = {lo:250000000,hi:0};
//GlobalTimestamp.maxBusClockFreq = {lo:1000000000,hi:0};
//GlobalTimestamp.cpuCyclesPerTick = 4;

//var LoggingSetup = xdc.useModule('ti.uia.sysbios.LoggingSetup');
/* Increase the sysbios logger and turn Hwi and Swi logging off */
//LoggingSetup.sysbiosLoggerSize = 32768;
//LoggingSetup.mainLoggerSize = 8*1024;
//LoggingSetup.loadLoggerSize = 32768;
//LoggingSetup.loadLogging = true;
//LoggingSetup.sysbiosTaskLogging = false;
//LoggingSetup.sysbiosSwiLogging = false;
//LoggingSetup.sysbiosHwiLogging = false;
//LoggingSetup.overflowLoggerSize = 0;
//LoggingSetup.eventUploadMode = LoggingSetup.UploadMode_NONJTAGTRANSPORT;

//Exc.common$.logger = Main.common$.logger;
Exc.enablePrint = true;

/* ================ UIA configuration ================ */
/*
 *  This example is a multi-core example, so UIA's ServiceMgr 
 *  must be configured to collect events from multiple cores.
 */ 
//var ServiceMgr = xdc.useModule('ti.uia.runtime.ServiceMgr');
//ServiceMgr.topology = ServiceMgr.Topology_MULTICORE;
//ServiceMgr.masterProcId = 0;
//ServiceMgr.transportType = ServiceMgr.TransportType_FILE;

/* The application is using the UIA benchmark events. */ 
//var UIABenchmark  = xdc.useModule('ti.uia.events.UIABenchmark');

Program.sectMap[".vecs"]   = {loadSegment: "MSMCSRAM_SLAVE", loadAlign:1024};
Program.sectMap[".switch"] = {loadSegment: "MSMCSRAM_SLAVE", loadAlign:8};
Program.sectMap[".cio"]    = {loadSegment: "L2SRAM", loadAlign:8};
Program.sectMap[".args"]   = {loadSegment: "L2SRAM", loadAlign:8};

Program.sectMap[".cinit"]               = "MSMCSRAM_SLAVE";
Program.sectMap[".const"]               = "MSMCSRAM_SLAVE";
Program.sectMap[".text"]                = "MSMCSRAM_SLAVE";
Program.sectMap["systemHeap"]           = "L2SRAM";
Program.sectMap[".far"]                 = "L2SRAM";
Program.sectMap[".bss"]                 = "L2SRAM";
Program.sectMap[".rodata"]              = "L2SRAM";
Program.sectMap[".neardata"]            = "L2SRAM";
Program.sectMap[".code"]                = "L2SRAM";
Program.sectMap[".data"]                = "L2SRAM";
Program.sectMap[".sysmem"]              = "L2SRAM";
Program.sectMap[".defaultStackSection"] = "L2SRAM";
Program.sectMap[".stack"]               = "L2SRAM";
Program.sectMap[".plt"]                 = "L2SRAM";

/* Create the stack Thread Task for our application. */
//var tskSlaveThread       = Task.create("&slave_main");
//tskSlaveThread.stackSize = 0x2000;
//tskSlaveThread.priority  = 0x5;
//tskSlaveThread.instance.name = "slave_main";

